package com.tzutalin.dlibtest;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.LruCache;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import java.io.File;
import java.util.List;

/**
 * Created by ckt on 6/14/17.
 */

public class FacePictureAdapter extends ArrayAdapter<FacePicture> {

    private int mResourceId;
    private LruCache<String, Bitmap> mMemoryCache;
    private ListView mListView;

    public FacePictureAdapter(@NonNull Context context, @LayoutRes int resource, @NonNull List<FacePicture> objects, ListView listView) {
        super(context, resource, objects);
        mResourceId = resource;
        mListView = listView;

        int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
        // 使用最大可用内存值的1/8作为缓存的大小。
        int cacheSize = maxMemory / 8;
        mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {
            @Override
            protected int sizeOf(String key, Bitmap bitmap) {
                // 重写此方法来衡量每张图片的大小，默认返回图片数量。
                return bitmap.getByteCount() / 1024;
            }
        };
    }

    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

        FacePicture facePicture = getItem(position); //facepicture 是自定义的类，有get和set的方法
        View view;
        ViewHolder viewHolder;
        if (convertView == null){
            view = LayoutInflater.from(getContext()).inflate(mResourceId,null);
            viewHolder = new ViewHolder();
            viewHolder.countText = (TextView)view.findViewById(R.id.count_text);
            viewHolder.facePicture = (ImageView)view.findViewById(R.id.face_image);
            view.setTag(viewHolder);
        }else {
            view = convertView;
            viewHolder = (ViewHolder) view.getTag();
        }
        viewHolder.countText.setText(String.valueOf(facePicture.getCount()));
//        viewHolder.facePicture.setImageURI(Uri.fromFile(new File(facePicture.getImagePath().get(1))));
//        viewHolder.facePicture.setImageBitmap(decodeSampledBitmapFromFile(facePicture.getImagePath().get(1), 100, 100));
        viewHolder.facePicture.setTag(facePicture.getImagePath().get(1));
        loadBitmap(facePicture.getImagePath().get(1), viewHolder.facePicture);
        return view;
    }

    class ViewHolder {
        TextView countText;
        ImageView facePicture;
    }


    public static Bitmap decodeSampledBitmapFromFile (String pach, int reqWidth, int reqHeight) {
        // 第一次解析将inJustDecodeBounds设置为true，来获取图片大小
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(pach, options);
        // 调用上面定义的方法计算inSampleSize值
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
        // 使用获取到的inSampleSize值再次解析图片
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeFile(pach, options);
    }

    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // 源图片的高度和宽度
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;
        if (height > reqHeight || width > reqWidth) {
            // 计算出实际宽高和目标宽高的比率
            final int heightRatio = Math.round((float) height / (float) reqHeight);
            final int widthRatio = Math.round((float) width / (float) reqWidth);
            // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高
            // 一定都会大于等于目标的宽和高。
            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
        }
        return inSampleSize;
    }

    public void addBitmapToMemoryCache(String key, Bitmap bitmap) {
        if (getBitmapFromMemCache(key) == null) {
            mMemoryCache.put(key, bitmap);
        }
    }

    public Bitmap getBitmapFromMemCache(String key) {
        return mMemoryCache.get(key);
    }

    class BitmapWorkerTask extends AsyncTask<String, Void, Bitmap> {

        private String mPath;

        // 在后台加载图片。
        @Override
        protected Bitmap doInBackground(String... strings) {
            mPath = strings[0];
            final Bitmap bitmap = decodeSampledBitmapFromFile(strings[0], 100, 100);
            addBitmapToMemoryCache(strings[0], bitmap);
            return bitmap;
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            super.onPostExecute(bitmap);
            ImageView imageView = (ImageView)mListView.findViewWithTag(mPath);
            if (imageView != null && bitmap != null){
                imageView.setImageBitmap(bitmap);
            }
        }
    }

    public void loadBitmap(String path, ImageView imageView) {
        final Bitmap bitmap = getBitmapFromMemCache(path);
        if (bitmap != null) {
            imageView.setImageBitmap(bitmap);
        } else {
            imageView.setImageResource(R.drawable.gallery);
            BitmapWorkerTask task = new BitmapWorkerTask();
            task.execute(path);
        }
    }

}


使用：
        FacePictureAdapter facePictureAdapter = new FacePictureAdapter(this, R.layout.face_picture_item, mFacePictureList, listView);

        listView.setAdapter(facePictureAdapter);
